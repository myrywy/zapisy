// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* zapisy.h
   Generated by wsdl2h 2.8.30 from zapisy.wsdl and typemap.dat
   2016-04-09 15:17:43 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on zapisy.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   localhost/zapisy.wsdl                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "localhost/zapisy.wsdl"
ns2 = "2.xds"

*/

#define SOAP_NAMESPACE_OF_ns2	"2.xds"
//gsoap ns2   schema namespace:	2.xds
//gsoap ns2   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::string xsd__nonNegativeInteger;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns2__student.
class ns2__student;

//  Forward declaration of class ns2__temat.
class ns2__temat;

//  Forward declaration of class ns2__termin.
class ns2__termin;

//  Forward declaration of class ns2__sala.
class ns2__sala;

//  Forward declaration of class ns2__przedmiot.
class ns2__przedmiot;

//  Forward declaration of class ns2__typ.
class ns2__typ;

//  Forward declaration of class ns2__prowadzacy.
class ns2__prowadzacy;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   2.xds                                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "2.xds":godzina is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[0-2][0-9]:[0-5][0-9]".
typedef std::string ns2__godzina "[0-2][0-9]:[0-5][0-9]";

/// @brief "2.xds":id is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns2__id;

/// @brief "2.xds":csv is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns2__csv;

/// @brief "2.xds":filename is a simpleType restriction of XSD type xs:integer.
///
typedef xsd__integer ns2__filename;

/// @brief "2.xds":nr_index is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[0-9]{6}".
typedef std::string ns2__nr_USCOREindex "[0-9]{6}";

/// @brief "2.xds":wynik is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "ok|blad".
typedef std::string ns2__wynik "ok|blad";


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   2.xds                                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "2.xds":student is a complexType.
///
/// class ns2__student operations:
/// - ns2__student* soap_new_ns2__student(soap*) allocate
/// - ns2__student* soap_new_ns2__student(soap*, int num) allocate array
/// - ns2__student* soap_new_req_ns2__student(soap*, ...) allocate, set required members
/// - ns2__student* soap_new_set_ns2__student(soap*, ...) allocate, set all public members
/// - ns2__student::soap_default(soap*) reset members to default
/// - int soap_read_ns2__student(soap*, ns2__student*) deserialize from a stream
/// - int soap_write_ns2__student(soap*, ns2__student*) serialize to a stream
/// - ns2__student* ns2__student::soap_dup(soap*) returns deep copy of ns2__student, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__student::soap_del() deep deletes ns2__student data members, use only after ns2__student::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__student
{ public:
/// Element "imie" of XSD type xs:string.
    std::string                          imie                           1;	///< Required element.
/// Element "nazwisko" of XSD type xs:string.
    std::string                          nazwisko                       1;	///< Required element.
/// Element "index" of XSD type "":nr_index.
    ns2__nr_USCOREindex                  index                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":temat is a complexType.
///
/// class ns2__temat operations:
/// - ns2__temat* soap_new_ns2__temat(soap*) allocate
/// - ns2__temat* soap_new_ns2__temat(soap*, int num) allocate array
/// - ns2__temat* soap_new_req_ns2__temat(soap*, ...) allocate, set required members
/// - ns2__temat* soap_new_set_ns2__temat(soap*, ...) allocate, set all public members
/// - ns2__temat::soap_default(soap*) reset members to default
/// - int soap_read_ns2__temat(soap*, ns2__temat*) deserialize from a stream
/// - int soap_write_ns2__temat(soap*, ns2__temat*) serialize to a stream
/// - ns2__temat* ns2__temat::soap_dup(soap*) returns deep copy of ns2__temat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__temat::soap_del() deep deletes ns2__temat data members, use only after ns2__temat::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__temat
{ public:
/// Element "temat" of XSD type xs:string.
    std::string                          temat                          1;	///< Required element.
/// Element "opis" of XSD type xs:string.
    std::string                          opis                           1;	///< Required element.
/// Element "miejsca" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              miejsca                        1;	///< Required element.
/// Element "wolne_miejsca" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              wolne_USCOREmiejsca            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":termin is a complexType.
///
/// class ns2__termin operations:
/// - ns2__termin* soap_new_ns2__termin(soap*) allocate
/// - ns2__termin* soap_new_ns2__termin(soap*, int num) allocate array
/// - ns2__termin* soap_new_req_ns2__termin(soap*, ...) allocate, set required members
/// - ns2__termin* soap_new_set_ns2__termin(soap*, ...) allocate, set all public members
/// - ns2__termin::soap_default(soap*) reset members to default
/// - int soap_read_ns2__termin(soap*, ns2__termin*) deserialize from a stream
/// - int soap_write_ns2__termin(soap*, ns2__termin*) serialize to a stream
/// - ns2__termin* ns2__termin::soap_dup(soap*) returns deep copy of ns2__termin, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__termin::soap_del() deep deletes ns2__termin data members, use only after ns2__termin::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__termin
{ public:
/// Element "dzien" of XSD type xs:string.
    std::string                          dzien                          1;	///< Required element.
/// Element "godzina_od" of XSD type "":godzina.
    ns2__godzina                         godzina_USCOREod               1;	///< Required element.
/// Element "godzina_od" of XSD type "":godzina.
    ns2__godzina                         godzina_USCOREod               1;	///< Required element.
/// Element "miejsca" of XSD type xs:int.
    int                                  miejsca                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":sala is a complexType.
///
/// class ns2__sala operations:
/// - ns2__sala* soap_new_ns2__sala(soap*) allocate
/// - ns2__sala* soap_new_ns2__sala(soap*, int num) allocate array
/// - ns2__sala* soap_new_req_ns2__sala(soap*, ...) allocate, set required members
/// - ns2__sala* soap_new_set_ns2__sala(soap*, ...) allocate, set all public members
/// - ns2__sala::soap_default(soap*) reset members to default
/// - int soap_read_ns2__sala(soap*, ns2__sala*) deserialize from a stream
/// - int soap_write_ns2__sala(soap*, ns2__sala*) serialize to a stream
/// - ns2__sala* ns2__sala::soap_dup(soap*) returns deep copy of ns2__sala, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__sala::soap_del() deep deletes ns2__sala data members, use only after ns2__sala::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__sala
{ public:
/// Element "numer" of XSD type xs:string.
    std::string                          numer                          1;	///< Required element.
/// Element "max_miejsc" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              max_USCOREmiejsc               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":przedmiot is a complexType.
///
/// class ns2__przedmiot operations:
/// - ns2__przedmiot* soap_new_ns2__przedmiot(soap*) allocate
/// - ns2__przedmiot* soap_new_ns2__przedmiot(soap*, int num) allocate array
/// - ns2__przedmiot* soap_new_req_ns2__przedmiot(soap*, ...) allocate, set required members
/// - ns2__przedmiot* soap_new_set_ns2__przedmiot(soap*, ...) allocate, set all public members
/// - ns2__przedmiot::soap_default(soap*) reset members to default
/// - int soap_read_ns2__przedmiot(soap*, ns2__przedmiot*) deserialize from a stream
/// - int soap_write_ns2__przedmiot(soap*, ns2__przedmiot*) serialize to a stream
/// - ns2__przedmiot* ns2__przedmiot::soap_dup(soap*) returns deep copy of ns2__przedmiot, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__przedmiot::soap_del() deep deletes ns2__przedmiot data members, use only after ns2__przedmiot::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__przedmiot
{ public:
/// Element "nazwa" of XSD type xs:string.
    std::string                          nazwa                          1;	///< Required element.
/// Element "typ" of XSD type xs:integer.
    xsd__integer                         typ                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":typ is a complexType.
///
/// class ns2__typ operations:
/// - ns2__typ* soap_new_ns2__typ(soap*) allocate
/// - ns2__typ* soap_new_ns2__typ(soap*, int num) allocate array
/// - ns2__typ* soap_new_req_ns2__typ(soap*, ...) allocate, set required members
/// - ns2__typ* soap_new_set_ns2__typ(soap*, ...) allocate, set all public members
/// - ns2__typ::soap_default(soap*) reset members to default
/// - int soap_read_ns2__typ(soap*, ns2__typ*) deserialize from a stream
/// - int soap_write_ns2__typ(soap*, ns2__typ*) serialize to a stream
/// - ns2__typ* ns2__typ::soap_dup(soap*) returns deep copy of ns2__typ, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__typ::soap_del() deep deletes ns2__typ data members, use only after ns2__typ::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__typ
{ public:
/// Element "id" of XSD type xs:integer.
    xsd__integer                         id                             1;	///< Required element.
/// Element "opis" of XSD type xs:string.
    std::string                          opis                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "2.xds":prowadzacy is a complexType.
///
/// class ns2__prowadzacy operations:
/// - ns2__prowadzacy* soap_new_ns2__prowadzacy(soap*) allocate
/// - ns2__prowadzacy* soap_new_ns2__prowadzacy(soap*, int num) allocate array
/// - ns2__prowadzacy* soap_new_req_ns2__prowadzacy(soap*, ...) allocate, set required members
/// - ns2__prowadzacy* soap_new_set_ns2__prowadzacy(soap*, ...) allocate, set all public members
/// - ns2__prowadzacy::soap_default(soap*) reset members to default
/// - int soap_read_ns2__prowadzacy(soap*, ns2__prowadzacy*) deserialize from a stream
/// - int soap_write_ns2__prowadzacy(soap*, ns2__prowadzacy*) serialize to a stream
/// - ns2__prowadzacy* ns2__prowadzacy::soap_dup(soap*) returns deep copy of ns2__prowadzacy, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__prowadzacy::soap_del() deep deletes ns2__prowadzacy data members, use only after ns2__prowadzacy::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__prowadzacy
{ public:
/// Element "email" of XSD type xs:string.
    std::string                          email                          1;	///< Required element.
/// Element "haslo" of XSD type xs:string.
    std::string                          haslo                          1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   2.xds                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   2.xds                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns3  service name:	zapisy 
//gsoap ns3  service type:	zapisy 
//gsoap ns3  service port:	http://127.0.0.1/ 
//gsoap ns3  service namespace:	tns 
//gsoap ns3  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage zapisy Definitions

@section zapisy_bindings Service Bindings

  - @ref zapisy

@section zapisy_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page zapisy Binding "zapisy"

@section zapisy_service Service Documentation "zapisy"
gSOAP 2.7.9k generated service definition

@section zapisy_operations Operations of Binding "zapisy"

  - @ref ns3__zapisz_USCOREprojekt

  - @ref ns3__dodaj_USCOREprojekt

  - @ref ns3__zapisz_USCOREtermin

  - @ref ns3__dodaj_USCOREtermin

  - @ref ns3__eksportuj_USCOREprojekt

  - @ref ns3__eksportuj_USCOREtermin

  - @ref ns3__eksportuj_USCOREprzedmiot

@section zapisy_ports Endpoints of Binding "zapisy"

  - http://127.0.0.1/

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   zapisy                                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__zapisz_USCOREprojekt                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__zapisz_USCOREprojektResponse" of operation "ns3__zapisz_USCOREprojekt".
struct ns3__zapisz_USCOREprojektResponse
{

/// @todo !FIXME! @warning Undefined QName "":wynik for type wynik in namespace "?", check WSDL and schema definitions.
    wynik                               rezultat;
};

/** Operation "ns3__zapisz_USCOREprojekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__zapisz_USCOREprojekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,
    // output parameters:
    struct ns3__zapisz_USCOREprojektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__zapisz_USCOREprojekt(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,
    // output parameters:
    struct ns3__zapisz_USCOREprojektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	zapisz_USCOREprojekt SOAP
//gsoap ns3  service method-style:	zapisz_USCOREprojekt rpc
//gsoap ns3  service method-encoding:	zapisz_USCOREprojekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	zapisz_USCOREprojekt ""
//gsoap ns3  service method-output-action:	zapisz_USCOREprojekt Response
int ns3__zapisz_USCOREprojekt(

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,	///< Input parameter

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,	///< Input parameter
    struct ns3__zapisz_USCOREprojektResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__dodaj_USCOREprojekt                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__dodaj_USCOREprojektResponse" of operation "ns3__dodaj_USCOREprojekt".
struct ns3__dodaj_USCOREprojektResponse
{

/// @todo !FIXME! @warning Undefined QName "":wynik for type wynik in namespace "?", check WSDL and schema definitions.
    wynik                               rezultat;
};

/** Operation "ns3__dodaj_USCOREprojekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__dodaj_USCOREprojekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":temat for type temat in namespace "?", check WSDL and schema definitions.
    temat                               projekt,
    // output parameters:
    struct ns3__dodaj_USCOREprojektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__dodaj_USCOREprojekt(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":temat for type temat in namespace "?", check WSDL and schema definitions.
    temat                               projekt,
    // output parameters:
    struct ns3__dodaj_USCOREprojektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	dodaj_USCOREprojekt SOAP
//gsoap ns3  service method-style:	dodaj_USCOREprojekt rpc
//gsoap ns3  service method-encoding:	dodaj_USCOREprojekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	dodaj_USCOREprojekt ""
//gsoap ns3  service method-output-action:	dodaj_USCOREprojekt Response
int ns3__dodaj_USCOREprojekt(

/// @todo !FIXME! @warning Undefined QName "":temat for type temat in namespace "?", check WSDL and schema definitions.
    temat                               projekt,	///< Input parameter
    struct ns3__dodaj_USCOREprojektResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__zapisz_USCOREtermin                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__zapisz_USCOREterminResponse" of operation "ns3__zapisz_USCOREtermin".
struct ns3__zapisz_USCOREterminResponse
{

/// @todo !FIXME! @warning Undefined QName "":wynik for type wynik in namespace "?", check WSDL and schema definitions.
    wynik                               rezultat;
};

/** Operation "ns3__zapisz_USCOREtermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__zapisz_USCOREtermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,
    // output parameters:
    struct ns3__zapisz_USCOREterminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__zapisz_USCOREtermin(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,
    // output parameters:
    struct ns3__zapisz_USCOREterminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	zapisz_USCOREtermin SOAP
//gsoap ns3  service method-style:	zapisz_USCOREtermin rpc
//gsoap ns3  service method-encoding:	zapisz_USCOREtermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	zapisz_USCOREtermin ""
//gsoap ns3  service method-output-action:	zapisz_USCOREtermin Response
int ns3__zapisz_USCOREtermin(

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,	///< Input parameter

/// @todo !FIXME! @warning Undefined QName "":student for type student in namespace "?", check WSDL and schema definitions.
    student                             zapisywany,	///< Input parameter
    struct ns3__zapisz_USCOREterminResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__dodaj_USCOREtermin                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__dodaj_USCOREterminResponse" of operation "ns3__dodaj_USCOREtermin".
struct ns3__dodaj_USCOREterminResponse
{

/// @todo !FIXME! @warning Undefined QName "":wynik for type wynik in namespace "?", check WSDL and schema definitions.
    wynik                               rezultat;
};

/** Operation "ns3__dodaj_USCOREtermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__dodaj_USCOREtermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":termin for type termin in namespace "?", check WSDL and schema definitions.
    termin                              termin,
    // output parameters:
    struct ns3__dodaj_USCOREterminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__dodaj_USCOREtermin(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":termin for type termin in namespace "?", check WSDL and schema definitions.
    termin                              termin,
    // output parameters:
    struct ns3__dodaj_USCOREterminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	dodaj_USCOREtermin SOAP
//gsoap ns3  service method-style:	dodaj_USCOREtermin rpc
//gsoap ns3  service method-encoding:	dodaj_USCOREtermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	dodaj_USCOREtermin ""
//gsoap ns3  service method-output-action:	dodaj_USCOREtermin Response
int ns3__dodaj_USCOREtermin(

/// @todo !FIXME! @warning Undefined QName "":termin for type termin in namespace "?", check WSDL and schema definitions.
    termin                              termin,	///< Input parameter
    struct ns3__dodaj_USCOREterminResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__eksportuj_USCOREprojekt                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__eksportuj_USCOREprojektResponse" of operation "ns3__eksportuj_USCOREprojekt".
struct ns3__eksportuj_USCOREprojektResponse
{

/// @todo !FIXME! @warning Undefined QName "":filename for type filename in namespace "?", check WSDL and schema definitions.
    filename                            nazwa;

/// @todo !FIXME! @warning Undefined QName "":csv for type csv in namespace "?", check WSDL and schema definitions.
    csv                                 plik;
};

/** Operation "ns3__eksportuj_USCOREprojekt" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__eksportuj_USCOREprojekt(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREprojektResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__eksportuj_USCOREprojekt(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREprojektResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	eksportuj_USCOREprojekt SOAP
//gsoap ns3  service method-style:	eksportuj_USCOREprojekt rpc
//gsoap ns3  service method-encoding:	eksportuj_USCOREprojekt http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	eksportuj_USCOREprojekt ""
//gsoap ns3  service method-output-action:	eksportuj_USCOREprojekt Response
int ns3__eksportuj_USCOREprojekt(

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,	///< Input parameter
    struct ns3__eksportuj_USCOREprojektResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__eksportuj_USCOREtermin                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__eksportuj_USCOREterminResponse" of operation "ns3__eksportuj_USCOREtermin".
struct ns3__eksportuj_USCOREterminResponse
{

/// @todo !FIXME! @warning Undefined QName "":filename for type filename in namespace "?", check WSDL and schema definitions.
    filename                            nazwa;

/// @todo !FIXME! @warning Undefined QName "":csv for type csv in namespace "?", check WSDL and schema definitions.
    csv                                 plik;
};

/** Operation "ns3__eksportuj_USCOREtermin" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__eksportuj_USCOREtermin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREterminResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__eksportuj_USCOREtermin(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREterminResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	eksportuj_USCOREtermin SOAP
//gsoap ns3  service method-style:	eksportuj_USCOREtermin rpc
//gsoap ns3  service method-encoding:	eksportuj_USCOREtermin http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	eksportuj_USCOREtermin ""
//gsoap ns3  service method-output-action:	eksportuj_USCOREtermin Response
int ns3__eksportuj_USCOREtermin(

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,	///< Input parameter
    struct ns3__eksportuj_USCOREterminResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns3__eksportuj_USCOREprzedmiot                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns3__eksportuj_USCOREprzedmiotResponse" of operation "ns3__eksportuj_USCOREprzedmiot".
struct ns3__eksportuj_USCOREprzedmiotResponse
{

/// @todo !FIXME! @warning Undefined QName "":filename for type filename in namespace "?", check WSDL and schema definitions.
    filename                            nazwa;

/// @todo !FIXME! @warning Undefined QName "":csv for type csv in namespace "?", check WSDL and schema definitions.
    csv                                 plik;
};

/** Operation "ns3__eksportuj_USCOREprzedmiot" of service binding "zapisy".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns3__eksportuj_USCOREprzedmiot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREprzedmiotResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns3__eksportuj_USCOREprzedmiot(
    struct soap *soap,
    // input parameters:

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,
    // output parameters:
    struct ns3__eksportuj_USCOREprzedmiotResponse&
  );
@endcode

C++ proxy class (defined in soapzapisyProxy.h):
@code
  class zapisyProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapzapisyService.h):
@code
  class zapisyService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns3  service method-protocol:	eksportuj_USCOREprzedmiot SOAP
//gsoap ns3  service method-style:	eksportuj_USCOREprzedmiot rpc
//gsoap ns3  service method-encoding:	eksportuj_USCOREprzedmiot http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns3  service method-action:	eksportuj_USCOREprzedmiot ""
//gsoap ns3  service method-output-action:	eksportuj_USCOREprzedmiot Response
int ns3__eksportuj_USCOREprzedmiot(

/// @todo !FIXME! @warning Undefined QName "":id for type id in namespace "?", check WSDL and schema definitions.
    id                                  ID,	///< Input parameter
    struct ns3__eksportuj_USCOREprzedmiotResponse&	///< Output response struct parameter
);

/**

@page zapisy Binding "zapisy"

@section zapisy_policy_enablers Policy Enablers of Binding "zapisy"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "2.xds"

*/

/* End of zapisy.h */
